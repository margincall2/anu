#property copyright "Copyright 2023, Your Name"
#property link      "https://www.example.com"
#property version   "1.00"
#property description "Flexible High-Low Pending Orders EA with Advanced Features"

// Input parameters
input ulong   MagicNumber = 123456;      // Magic Number
input double  LotSize = 0.1;             // Lot Size
input int     StopLoss = 50;             // Stop Loss (points)
input int     TakeProfit = 100;          // Take Profit (points)
input int     TrailingStop = 30;         // Trailing Stop (points)
input int     BreakEven = 20;            // Break Even (points)
input int     MaxSpread = 10;            // Max Allowed Spread (points)
input ENUM_TIMEFRAMES Timeframe = PERIOD_CURRENT;  // High/Low Timeframe
input string  OrderComment = "HLStrategy"; // Order Comment

// Global variables
datetime lastBarTime;
double currentHigh, currentLow;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   lastBarTime = 0;
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   if(!CheckSpread()) return;
   
   if(IsNewBar())
   {
      UpdateLevels();
      ManagePendingOrders();
   }
   
   ManageOpenPositions();
}

//+------------------------------------------------------------------+
//| Check spread conditions                                          |
//+------------------------------------------------------------------+
bool CheckSpread()
{
   int spread = (int)SymbolInfoInteger(Symbol(), SYMBOL_SPREAD);
   if(spread > MaxSpread)
   {
      CancelAllPending();
      return false;
   }
   return true;
}

//+------------------------------------------------------------------+
//| Check for new bar formation                                      |
//+------------------------------------------------------------------+
bool IsNewBar()
{
   datetime currentBarTime = iTime(Symbol(), Timeframe, 0);
   if(currentBarTime != lastBarTime)
   {
      lastBarTime = currentBarTime;
      return true;
   }
   return false;
}

//+------------------------------------------------------------------+
//| Update high/low levels                                           |
//+------------------------------------------------------------------+
void UpdateLevels()
{
   currentHigh = iHigh(Symbol(), Timeframe, 1);
   currentLow = iLow(Symbol(), Timeframe, 1);
}

//+------------------------------------------------------------------+
//| Manage pending orders                                            |
//+------------------------------------------------------------------+
void ManagePendingOrders()
{
   bool buyStopFound = false, sellStopFound = false;
   ulong buyTicket = 0, sellTicket = 0;

   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      ulong ticket = OrderGetTicket(i);
      if(ticket <= 0) continue;
      
      if(OrderGetInteger(ORDER_MAGIC) == MagicNumber && 
         OrderGetString(ORDER_COMMENT) == OrderComment)
      {
         ENUM_ORDER_TYPE type = (ENUM_ORDER_TYPE)OrderGetInteger(ORDER_TYPE);
         if(type == ORDER_TYPE_BUY_STOP)
         {
            buyStopFound = true;
            buyTicket = ticket;
            CheckModifyOrder(buyTicket, currentHigh, ORDER_TYPE_BUY_STOP);
         }
         else if(type == ORDER_TYPE_SELL_STOP)
         {
            sellStopFound = true;
            sellTicket = ticket;
            CheckModifyOrder(sellTicket, currentLow, ORDER_TYPE_SELL_STOP);
         }
      }
   }

   if(!buyStopFound) PlacePendingOrder(ORDER_TYPE_BUY_STOP, currentHigh);
   if(!sellStopFound) PlacePendingOrder(ORDER_TYPE_SELL_STOP, currentLow);
}

//+------------------------------------------------------------------+
//| Check and modify existing order                                  |
//+------------------------------------------------------------------+
void CheckModifyOrder(ulong ticket, double newPrice, ENUM_ORDER_TYPE type)
{
   double currentPrice = OrderGetDouble(ORDER_PRICE_OPEN);
   if(currentPrice == newPrice) return;

   double sl = (type == ORDER_TYPE_BUY_STOP) ? 
               newPrice - StopLoss * _Point : 
               newPrice + StopLoss * _Point;
   double tp = (type == ORDER_TYPE_BUY_STOP) ? 
               newPrice + TakeProfit * _Point : 
               newPrice - TakeProfit * _Point;

   MqlTradeRequest request = {0};
   MqlTradeResult result = {0};
   
   request.action = TRADE_ACTION_MODIFY;
   request.order = ticket;
   request.price = newPrice;
   request.sl = sl;
   request.tp = tp;
   
   OrderSend(request, result);
}

//+------------------------------------------------------------------+
//| Place new pending order                                          |
//+------------------------------------------------------------------+
void PlacePendingOrder(ENUM_ORDER_TYPE type, double price)
{
   double sl = (type == ORDER_TYPE_BUY_STOP) ? 
               price - StopLoss * _Point : 
               price + StopLoss * _Point;
   double tp = (type == ORDER_TYPE_BUY_STOP) ? 
               price + TakeProfit * _Point : 
               price - TakeProfit * _Point;

   MqlTradeRequest request = {0};
   MqlTradeResult result = {0};
   
   request.action = TRADE_ACTION_PENDING;
   request.symbol = Symbol();
   request.volume = LotSize;
   request.type = type;
   request.price = price;
   request.sl = sl;
   request.tp = tp;
   request.deviation = 5;
   request.magic = MagicNumber;
   request.comment = OrderComment;
   
   OrderSend(request, result);
}

//+------------------------------------------------------------------+
//| Cancel all pending orders                                        |
//+------------------------------------------------------------------+
void CancelAllPending()
{
   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      ulong ticket = OrderGetTicket(i);
      if(ticket <= 0) continue;
      
      if(OrderGetInteger(ORDER_MAGIC) == MagicNumber && 
         OrderGetString(ORDER_COMMENT) == OrderComment)
      {
         MqlTradeRequest request = {0};
         MqlTradeResult result = {0};
         request.action = TRADE_ACTION_REMOVE;
         request.order = ticket;
         OrderSend(request, result);
      }
   }
}

//+------------------------------------------------------------------+
//| Manage open positions with trailing and breakeven                |
//+------------------------------------------------------------------+
void ManageOpenPositions()
{
   for(int i = PositionsTotal()-1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket <= 0) continue;
      
      if(PositionGetInteger(POSITION_MAGIC) == MagicNumber && 
         PositionGetString(POSITION_COMMENT) == OrderComment)
      {
         CheckTrailingStop(ticket);
         CheckBreakEven(ticket);
      }
   }
}

//+------------------------------------------------------------------+
//| Implement trailing stop functionality                           |
//+------------------------------------------------------------------+
void CheckTrailingStop(ulong ticket)
{
   ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
   double currentPrice = type == POSITION_TYPE_BUY ? Bid() : Ask();
   double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
   double currentSl = PositionGetDouble(POSITION_SL);
   double pointsProfit = MathAbs(currentPrice - openPrice)/_Point;

   if(pointsProfit < TrailingStop) return;

   double newSl = currentPrice - (type == POSITION_TYPE_BUY ? 
                  TrailingStop * _Point : -TrailingStop * _Point);

   if((type == POSITION_TYPE_BUY && newSl > currentSl) || 
      (type == POSITION_TYPE_SELL && newSl < currentSl))
   {
      ModifyPositionSl(ticket, newSl);
   }
}

//+------------------------------------------------------------------+
//| Implement break even functionality                              |
//+------------------------------------------------------------------+
void CheckBreakEven(ulong ticket)
{
   ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
   double currentPrice = type == POSITION_TYPE_BUY ? Bid() : Ask();
   double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
   double currentSl = PositionGetDouble(POSITION_SL);
   double pointsProfit = MathAbs(currentPrice - openPrice)/_Point;

   if(pointsProfit < BreakEven) return;

   double newSl = openPrice + (type == POSITION_TYPE_BUY ? 1 * _Point : -1 * _Point);
   
   if((type == POSITION_TYPE_BUY && newSl > currentSl) || 
      (type == POSITION_TYPE_SELL && newSl < currentSl))
   {
      ModifyPositionSl(ticket, newSl);
   }
}

//+------------------------------------------------------------------+
//| Modify position's stop loss                                     |
//+------------------------------------------------------------------+
void ModifyPositionSl(ulong ticket, double newSl)
{
   MqlTradeRequest request = {0};
   MqlTradeResult result = {0};
   
   request.action = TRADE_ACTION_SLTP;
   request.position = ticket;
   request.symbol = Symbol();
   request.sl = newSl;
   request.tp = PositionGetDouble(POSITION_TP);
   
   OrderSend(request, result);
}
//+------------------------------------------------------------------+