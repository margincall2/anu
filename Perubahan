//+------------------------------------------------------------------+
//| Sakha Property with Advanced Protection System                     |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Sakha"
#property link      "https://shopee.co.id/algotrade"
#property version   "3.00"
#property strict
#property description "SakhaBreak V3 - Advanced Trading System"

// Optimize string constant
#define ORDER_COMMENT_CONST "SakhaBreak_DC"
#define LOG_UPDATE_INTERVAL 300    // 5 minutes
#define PRICE_CHECK_INTERVAL 5     // 5 seconds
#define VOLATILITY_UPDATE_INTERVAL 300  // 5 minutes
#define MAX_TRAILING_STATES 100    // Reduced from 1000
#define DONCHIAN_RECALC_INTERVAL 60 // 1 minute
#define LOG_CLEAN_THRESHOLD 10     // 10 MB

//+------------------------------------------------------------------+
//| Forward Declarations                                              |
//+------------------------------------------------------------------+
bool ModifyPositionSl(const ulong ticket, const double newSl);
void HandleSmartTrailing(const ulong ticket, const ENUM_POSITION_TYPE type,
                        const double currentPrice, const double currentSl,
                        const double pointsProfit);
void HandleRegularTrailing(const ulong ticket, const ENUM_POSITION_TYPE type,
                          const double currentPrice, const double currentSl);
void CancelAllPending();
bool ClosePosition(const ulong ticket);
double CalculateVolatility();
bool CalculateDonchianChannels(const string symbol, const ENUM_TIMEFRAMES timeframe, 
                             const int period, double &upperBand, double &lowerBand);
void SmartPrint(const string message, const bool isImportant = false);
void ManageLogFile();

//+------------------------------------------------------------------+
//| Structures Definition                                             |
//+------------------------------------------------------------------+
struct DonchianLevels 
{
    double upperBand;
    double lowerBand;
    datetime lastUpdate;
};

struct HiddenLevels 
{
    double realSL;
    double realTP;
    double fakeSL;
    double fakeTP;
};

struct TrailingState 
{
    bool isTrailingActive;
    double lastTrailingLevel;
    double highestProfit;
    double lowestProfit;
    datetime lastUpdate;
    double volatilityFactor;
    HiddenLevels levels;
};

//+------------------------------------------------------------------+
//| Global Variables and Objects                                      |
//+------------------------------------------------------------------+
MqlTradeRequest   request;
MqlTradeResult    result;
static TrailingState trailingStates[];
static DonchianLevels g_donchian;

// Cache frequently used values
static datetime lastBarTime = 0;
static datetime lastLogClean = 0;
static datetime lastPriceCheck = 0;
static int logCounter = 0;
static double currentHigh = 0.0;
static double currentLow = 0.0;
static double tickValue = 0.0;
static double minLot = 0.0;
static double maxLot = 0.0;
static string currentSymbol = "";
static double pointValue = 0.0;
static double commissionPerLot = 0.0;

// Cache indicator handles
static int atrHandle = INVALID_HANDLE;

//+------------------------------------------------------------------+
//| Input Parameters                                                  |
//+------------------------------------------------------------------+
// Trading Parameters
input group "Basic Trading Settings"
input ulong   MagicNumber = 123456;          // Magic Number
input double  LotSize = 0.1;                 // Lot Size (Initial)
input double  RiskPercent = 1.0;             // Risk per trade (%)
input string  OrderComment = ORDER_COMMENT_CONST; // Order Comment
input double  Commission = 3.0;              // Commission per trade

// Risk Management Parameters
input group "Risk Management"
input int     StopLoss = 50;                 // Stop Loss (points)
input int     TakeProfit = 100;              // Take Profit (points)
input int     TrailingStop = 20;             // Trailing Stop (points)
input int     BreakEven = 10;                // Break Even (points)
input int     MaxSpread = 10;                // Max Allowed Spread
input int     MaxPositions = 1;              // Maximum Positions Allowed
input bool    UseATRFilter = true;           // Use ATR Filter
input int     ATRPeriod = 14;               // ATR Period
input double  ATRMultiplier = 1.5;          // ATR Multiplier

// Virtual Protection Settings
input group "Virtual Protection Settings"
input bool    UseVirtualSLTP = true;         // Use Virtual SL/TP
input int     VirtualDistance = 30;          // Virtual Distance (points)
input bool    UseRandomOffset = true;        // Use Random Offset
input int     MaxRandomPoints = 5;           // Maximum Random Points
input bool    UseHiddenTP = true;           // Hide Take Profit Level
input bool    UseHiddenSL = true;           // Hide Stop Loss Level

// Smart Trailing Settings
input group "Smart Trailing Settings"
input bool    UseSmartTrailing = true;       // Use Smart Trailing
input bool    UseVolatilityTrailing = true;  // Volatility-based Trailing
input int     TrailingStartPoints = 50;      // Points before Trailing
input double  TrailingRatio = 2.0;           // Trailing Ratio
input int     MinimumTrailingStep = 5;       // Minimum Trailing Step
input double  VolatilityMultiplier = 1.0;    // Volatility Multiplier

// Timeframe Settings
input group "Timeframe Settings"
input ENUM_TIMEFRAMES Timeframe = PERIOD_CURRENT;      // Trading Timeframe
input ENUM_TIMEFRAMES DonchianTimeframe = PERIOD_H1;   // Donchian Timeframe
input int             DonchianPeriod = 20;            // Donchian Period
input bool            UseMultiTimeframe = false;       // Use Multi Timeframe

//+------------------------------------------------------------------+
//| Log Management Functions                                          |
//+------------------------------------------------------------------+
void SmartPrint(const string message, const bool isImportant = false)
{
    static datetime lastPrint = 0;
    datetime currentTime = TimeCurrent();
    
    if(isImportant || currentTime - lastPrint >= LOG_UPDATE_INTERVAL)
    {
        Print(message);
        lastPrint = currentTime;
        logCounter++;
        ManageLogFile();
    }
}

void ManageLogFile()
{
    if(logCounter >= 1000 || TimeCurrent() - lastLogClean >= 3600) // Check every hour or 1000 logs
    {
        string logFileName = "MQL5\\Logs\\" + MQLInfoString(MQL_PROGRAM_NAME) + ".log";
        if(FileIsExist(logFileName))
        {
            if(FileSize(logFileName) > LOG_CLEAN_THRESHOLD * 1024 * 1024)
            {
                FileDelete(logFileName);
                SmartPrint("Log file cleaned due to size limit", true);
            }
        }
        logCounter = 0;
        lastLogClean = TimeCurrent();
    }
}

//+------------------------------------------------------------------+
//| Helper Functions - Optimized                                      |
//+------------------------------------------------------------------+
bool CalculateDonchianChannels(const string symbol, const ENUM_TIMEFRAMES timeframe, 
                             const int period, double &upperBand, double &lowerBand)
{
    if(TimeCurrent() - g_donchian.lastUpdate < DONCHIAN_RECALC_INTERVAL &&
       g_donchian.upperBand > 0)
    {
        upperBand = g_donchian.upperBand;
        lowerBand = g_donchian.lowerBand;
        return true;
    }

    double highArray[], lowArray[];
    ArraySetAsSeries(highArray, true);
    ArraySetAsSeries(lowArray, true);
    
    if(ArrayResize(highArray, period) != period || ArrayResize(lowArray, period) != period)
    {
        SmartPrint("Failed to allocate arrays for Donchian calculation", true);
        return false;
    }
    
    int copied = CopyHigh(symbol, timeframe, 0, period, highArray);
    if(copied != period)
    {
        SmartPrint("Error copying high prices: " + IntegerToString(GetLastError()), true);
        return false;
    }
    
    copied = CopyLow(symbol, timeframe, 0, period, lowArray);
    if(copied != period)
    {
        SmartPrint("Error copying low prices: " + IntegerToString(GetLastError()), true);
        return false;
    }
    
    upperBand = highArray[ArrayMaximum(highArray, 0, period)];
    lowerBand = lowArray[ArrayMinimum(lowArray, 0, period)];
    
    g_donchian.upperBand = upperBand;
    g_donchian.lowerBand = lowerBand;
    g_donchian.lastUpdate = TimeCurrent();
    
    return true;
}

//+------------------------------------------------------------------+
//| Trading and Position Management Functions - Optimized             |
//+------------------------------------------------------------------+
bool PlacePendingOrder(const ENUM_ORDER_TYPE type, const double price)
{
    if(price <= 0)
    {
        SmartPrint("Invalid price for pending order", true);
        return false;
    }

    double spread = SymbolInfoDouble(currentSymbol, SYMBOL_ASK) - SymbolInfoDouble(currentSymbol, SYMBOL_BID);
    if(spread > MaxSpread * pointValue)
    {
        SmartPrint("Spread too high: " + DoubleToString(spread/pointValue, 1) + " points", true);
        return false;
    }

    HiddenLevels levels = CalculateHiddenLevels(price, type);
    
    ZeroMemory(request);
    ZeroMemory(result);

    request.action = TRADE_ACTION_PENDING;
    request.symbol = currentSymbol;
    request.volume = CalculateLotSize();
    request.type = type;
    request.price = NormalizeDouble(price, _Digits);
    request.sl = NormalizeDouble(levels.fakeSL, _Digits);
    request.tp = NormalizeDouble(levels.fakeTP, _Digits);
    request.deviation = 5;
    request.magic = MagicNumber;
    request.comment = OrderComment;

    bool success = OrderSend(request, result);
    if(success && result.retcode == TRADE_RETCODE_DONE)
    {
        trailingStates[result.order].levels = levels;
        SmartPrint("Order placed successfully: Type=" + EnumToString(type) + 
                   " Price=" + DoubleToString(price, _Digits), true);
        return true;
    }
    
    SmartPrint("Order placement failed: " + IntegerToString(result.retcode), true);
    return false;
}

//+------------------------------------------------------------------+
//| Position Management - Optimized                                   |
//+------------------------------------------------------------------+
void ManageOpenPositions()
{
    static datetime lastCheck = 0;
    if(TimeCurrent() - lastCheck < 1) return; // Check every second
    lastCheck = TimeCurrent();

    if(PositionsTotal() <= 0) return;

    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        ulong ticket = PositionGetTicket(i);
        if(PositionSelectByTicket(ticket) && 
           PositionGetInteger(POSITION_MAGIC) == MagicNumber)
        {
            ManagePosition(ticket);
        }
    }
}

void ManagePosition(const ulong ticket)
{
    if(!PositionSelectByTicket(ticket)) return;

    ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
    double currentPrice = (type == POSITION_TYPE_BUY) ? 
                         SymbolInfoDouble(currentSymbol, SYMBOL_BID) :
                         SymbolInfoDouble(currentSymbol, SYMBOL_ASK);
    double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
    double currentSl = PositionGetDouble(POSITION_SL);
    
    // Virtual SL/TP Check
    if(UseVirtualSLTP)
    {
        HiddenLevels levels = trailingStates[ticket].levels;
        if((type == POSITION_TYPE_BUY && currentPrice <= levels.realSL) ||
           (type == POSITION_TYPE_SELL && currentPrice >= levels.realSL))
        {
            SmartPrint("Virtual SL hit - Closing position " + IntegerToString(ticket), true);
            ClosePosition(ticket);
            return;
        }
        
        if((type == POSITION_TYPE_BUY && currentPrice >= levels.realTP) ||
           (type == POSITION_TYPE_SELL && currentPrice <= levels.realTP))
        {
            SmartPrint("Virtual TP hit - Closing position " + IntegerToString(ticket), true);
            ClosePosition(ticket);
            return;
        }
    }

    double pointsProfit = (MathAbs(currentPrice - openPrice) / pointValue) - commissionPerLot;
    bool isAtBreakeven = (type == POSITION_TYPE_BUY && currentSl >= openPrice) ||
                        (type == POSITION_TYPE_SELL && currentSl <= openPrice);

    // Break Even Logic
    if(!isAtBreakeven && pointsProfit >= BreakEven)
    {
        HandleBreakEven(ticket, type, openPrice);
    }
    // Trailing Logic
    else if(isAtBreakeven && pointsProfit >= TrailingStartPoints)
    {
        if(UseSmartTrailing)
            HandleSmartTrailing(ticket, type, currentPrice, currentSl, pointsProfit);
        else
            HandleRegularTrailing(ticket, type, currentPrice, currentSl);
    }
}

//+------------------------------------------------------------------+
//| Break Even Handler - New Optimized Function                       |
//+------------------------------------------------------------------+
void HandleBreakEven(const ulong ticket, const ENUM_POSITION_TYPE type, const double openPrice)
{
    double newSl = openPrice + (type == POSITION_TYPE_BUY ?
                  (1 + commissionPerLot) * pointValue :
                  (-1 - commissionPerLot) * pointValue);
                  
    if(UseVirtualSLTP)
    {
        trailingStates[ticket].levels.realSL = newSl;
        newSl = (type == POSITION_TYPE_BUY) ?
                newSl - VirtualDistance * pointValue :
                newSl + VirtualDistance * pointValue;
    }
    
    SmartPrint("Moving to breakeven - Position:" + IntegerToString(ticket) + 
               " New SL:" + DoubleToString(newSl, _Digits), true);
    
    if(ModifyPositionSl(ticket, newSl))
    {
        if(UseSmartTrailing)
        {
            trailingStates[ticket].isTrailingActive = false;
            trailingStates[ticket].lastTrailingLevel = 0.0;
        }
    }
}

//+------------------------------------------------------------------+
//| Pending Orders Management - Optimized                             |
//+------------------------------------------------------------------+
void ManagePendingOrders(const DonchianLevels &donchian)
{
    static datetime lastOrderCheck = 0;
    if(TimeCurrent() - lastOrderCheck < PRICE_CHECK_INTERVAL) return;
    lastOrderCheck = TimeCurrent();

    if(donchian.upperBand <= 0 || donchian.lowerBand <= 0)
    {
        SmartPrint("Invalid Donchian values", true);
        return;
    }

    const double effectiveUpperBand = NormalizeDouble(donchian.upperBand + commissionPerLot * pointValue, _Digits);
    const double effectiveLowerBand = NormalizeDouble(donchian.lowerBand - commissionPerLot * pointValue, _Digits);
    const double currentPrice = SymbolInfoDouble(currentSymbol, SYMBOL_ASK);

    // Quick price check to avoid unnecessary processing
    if(MathAbs(currentPrice - effectiveUpperBand) > 100 * pointValue && 
       MathAbs(currentPrice - effectiveLowerBand) > 100 * pointValue)
        return;

    bool buyStopExists = false, sellStopExists = false;
    CheckExistingOrders(buyStopExists, sellStopExists);

    if(currentPrice > effectiveUpperBand)
    {
        HandleBuyOrder(buyStopExists, effectiveUpperBand);
    }
    else if(currentPrice < effectiveLowerBand)
    {
        HandleSellOrder(sellStopExists, effectiveLowerBand);
    }
    else
    {
        CancelAllPending();
    }
}

//+------------------------------------------------------------------+
//| Trailing Functions - Optimized                                    |
//+------------------------------------------------------------------+
double CalculateVolatility()
{
    static double cachedATR = 0;
    static datetime lastATRUpdate = 0;
    
    if(TimeCurrent() - lastATRUpdate < VOLATILITY_UPDATE_INTERVAL && cachedATR > 0)
        return cachedATR;

    if(atrHandle == INVALID_HANDLE)
    {
        atrHandle = iATR(currentSymbol, PERIOD_CURRENT, ATRPeriod);
        if(atrHandle == INVALID_HANDLE)
        {
            SmartPrint("Failed to create ATR indicator handle", true);
            return 1.0;
        }
    }

    double atr[];
    ArraySetAsSeries(atr, true);
    
    if(CopyBuffer(atrHandle, 0, 0, ATRPeriod, atr) != ATRPeriod)
    {
        SmartPrint("Failed to copy ATR data", true);
        return 1.0;
    }
    
    double avgATR = 0;
    for(int i = 0; i < ATRPeriod; i++)
        avgATR += atr[i];
    
    avgATR /= ATRPeriod;
    if(avgATR > 0)
        cachedATR = atr[0] / avgATR;
    else
        cachedATR = 1.0;
        
    lastATRUpdate = TimeCurrent();
    return cachedATR;
}

void HandleSmartTrailing(const ulong ticket, const ENUM_POSITION_TYPE type,
                        const double currentPrice, const double currentSl,
                        const double pointsProfit)
{
    TrailingState &state = trailingStates[ticket];
    
    if(!state.isTrailingActive)
    {
        state.isTrailingActive = true;
        state.lastTrailingLevel = currentSl;
        state.highestProfit = pointsProfit;
        state.lowestProfit = pointsProfit;
        state.lastUpdate = TimeCurrent();
        state.volatilityFactor = UseVolatilityTrailing ? CalculateVolatility() : 1.0;
    }

    state.highestProfit = MathMax(state.highestProfit, pointsProfit);
    state.lowestProfit = MathMin(state.lowestProfit, pointsProfit);

    double trailingStep = UseVolatilityTrailing ? 
                         TrailingStop * state.volatilityFactor :
                         TrailingStop;
    
    trailingStep = MathMax(trailingStep, MinimumTrailingStep);
    double trailingDistance = NormalizeDouble(trailingStep * TrailingRatio, 1);

    double realNewSL = NormalizeDouble(currentPrice - (type == POSITION_TYPE_BUY ?
                      (trailingDistance + commissionPerLot) * pointValue :
                      -(trailingDistance + commissionPerLot) * pointValue), _Digits);

    if((type == POSITION_TYPE_BUY && realNewSL > state.levels.realSL) ||
       (type == POSITION_TYPE_SELL && realNewSL < state.levels.realSL))
    {
        double fakeNewSL = UseVirtualSLTP ? (type == POSITION_TYPE_BUY ?
                          realNewSL - VirtualDistance * pointValue :
                          realNewSL + VirtualDistance * pointValue) : realNewSL;

        fakeNewSL = NormalizeDouble(fakeNewSL, _Digits);
                          
        SmartPrint("Smart Trailing Update - Position:" + IntegerToString(ticket) + 
                  " New SL:" + DoubleToString(fakeNewSL, _Digits), true);
        
        if(ModifyPositionSl(ticket, fakeNewSL))
        {
            state.levels.realSL = realNewSL;
            state.lastTrailingLevel = fakeNewSL;
        }
    }

    // Update volatility factor periodically
    if(UseVolatilityTrailing && TimeCurrent() - state.lastUpdate >= VOLATILITY_UPDATE_INTERVAL)
    {
        state.volatilityFactor = CalculateVolatility();
        state.lastUpdate = TimeCurrent();
    }
}

void HandleRegularTrailing(const ulong ticket, const ENUM_POSITION_TYPE type,
                         const double currentPrice, const double currentSl)
{
    double newSl = NormalizeDouble(currentPrice - (type == POSITION_TYPE_BUY ?
                   (TrailingStop + commissionPerLot) * pointValue :
                   -(TrailingStop + commissionPerLot) * pointValue), _Digits);

    if((type == POSITION_TYPE_BUY && newSl > currentSl) ||
       (type == POSITION_TYPE_SELL && newSl < currentSl))
    {
        SmartPrint("Regular Trailing Update - Position:" + IntegerToString(ticket) + 
                  " New SL:" + DoubleToString(newSl, _Digits), true);
        ModifyPositionSl(ticket, newSl);
    }
}

//+------------------------------------------------------------------+
//| Utility Functions - Optimized                                     |
//+------------------------------------------------------------------+
bool ModifyPositionSl(const ulong ticket, const double newSl)
{
    if(!PositionSelectByTicket(ticket)) return false;

    ZeroMemory(request);
    ZeroMemory(result);

    request.action = TRADE_ACTION_SLTP;
    request.position = ticket;
    request.symbol = currentSymbol;
    request.sl = NormalizeDouble(newSl, _Digits);
    request.tp = PositionGetDouble(POSITION_TP);

    bool success = OrderSend(request, result);
    if(!success)
        SmartPrint("ModifyPositionSl failed: " + IntegerToString(GetLastError()), true);
        
    return success;
}

double CalculateLotSize()
{
    static double cachedLotSize = 0;
    static datetime lastLotCalc = 0;
    
    if(TimeCurrent() - lastLotCalc < 60 && cachedLotSize > 0)
        return cachedLotSize;

    double balance = AccountInfoDouble(ACCOUNT_BALANCE);
    double risk = balance * RiskPercent / 100.0;
    double tickRisk = StopLoss * tickValue + Commission;
    cachedLotSize = NormalizeDouble(risk / tickRisk, 2);
    
    lastLotCalc = TimeCurrent();
    return MathMin(MathMax(cachedLotSize, minLot), maxLot);
}

//+------------------------------------------------------------------+
//| Expert Initialization Function - Optimized                        |
//+------------------------------------------------------------------+
int OnInit()
{
    // Clear log file on start
    string logFileName = "MQL5\\Logs\\" + MQLInfoString(MQL_PROGRAM_NAME) + ".log";
    if(FileIsExist(logFileName))
        FileDelete(logFileName);
    
    // Initialize arrays with optimized size
    if(!ArrayResize(trailingStates, MAX_TRAILING_STATES))
    {
        SmartPrint("Failed to allocate memory for trailing states", true);
        return INIT_FAILED;
    }
    
    // Initialize symbol-specific values
    currentSymbol = Symbol();
    pointValue = SymbolInfoDouble(currentSymbol, SYMBOL_POINT);
    tickValue = SymbolInfoDouble(currentSymbol, SYMBOL_TRADE_TICK_VALUE);
    minLot = SymbolInfoDouble(currentSymbol, SYMBOL_VOLUME_MIN);
    maxLot = SymbolInfoDouble(currentSymbol, SYMBOL_VOLUME_MAX);
    commissionPerLot = Commission;
    
    // Initialize ATR handle if needed
    if(UseATRFilter || UseVolatilityTrailing)
    {
        atrHandle = iATR(currentSymbol, PERIOD_CURRENT, ATRPeriod);
        if(atrHandle == INVALID_HANDLE)
        {
            SmartPrint("Failed to create ATR indicator", true);
            return INIT_FAILED;
        }
    }
    
    // Print initial debug info
    PrintDebugInfo();
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert Deinitialization Function - Optimized                      |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    if(atrHandle != INVALID_HANDLE)
    {
        IndicatorRelease(atrHandle);
        atrHandle = INVALID_HANDLE;
    }
    
    ArrayFree(trailingStates);
    
    // Print final statistics
    PrintDebugInfo(true);
}

//+------------------------------------------------------------------+
//| Expert Tick Function - Optimized                                  |
//+------------------------------------------------------------------+
void OnTick()
{
    static datetime lastTick = 0;
    static int tickCounter = 0;
    static datetime lastDebugUpdate = 0;
    
    datetime currentTime = TimeCurrent();
    
    // Basic tick throttling
    if(currentTime - lastTick < 1) return;
    lastTick = currentTime;
    
    tickCounter++;
    
    // Update price data
    currentHigh = iHigh(currentSymbol, Timeframe, 0);
    currentLow = iLow(currentSymbol, Timeframe, 0);

    // Check for new bar
    datetime currentBarTime = iTime(currentSymbol, Timeframe, 0);
    bool isNewBar = (currentBarTime != lastBarTime);
    
    if(isNewBar)
    {
        lastBarTime = currentBarTime;
        if(!CalculateDonchianChannels(currentSymbol, DonchianTimeframe, 
                                    DonchianPeriod, g_donchian.upperBand, g_donchian.lowerBand))
        {
            SmartPrint("Failed to calculate Donchian Channels", true);
            return;
        }
    }

    // Core trading logic
    ManageOpenPositions();
    ManagePendingOrders(g_donchian);
    
    // Update debug info every minute
    if(currentTime - lastDebugUpdate >= 60)
    {
        UpdateDebugInfo(tickCounter);
        lastDebugUpdate = currentTime;
        tickCounter = 0;
    }
}

//+------------------------------------------------------------------+
//| Debug Information Functions - Elegant & Minimal                   |
//+------------------------------------------------------------------+
void PrintDebugInfo(bool isFinal = false)
{
    static int totalTicks = 0;
    static int totalOrders = 0;
    static double maxSpreadSeen = 0;
    static double avgSpread = 0;
    
    string separator = "\n" + StringRepeat("─", 50) + "\n";
    string info = separator;
    
    if(!isFinal)
    {
        info += "🤖 SakhaBreak V3 Initialized\n";
        info += "📊 Symbol: " + currentSymbol + "\n";
        info += "💰 Risk: " + DoubleToString(RiskPercent, 2) + "% | Lot: " + DoubleToString(CalculateLotSize(), 2) + "\n";
        info += "⚙️ Donchian: " + EnumToString(DonchianTimeframe) + " | Period: " + IntegerToString(DonchianPeriod) + "\n";
        info += "🛡️ Protection: " + (UseVirtualSLTP ? "Virtual" : "Standard") + " | Smart Trail: " + (UseSmartTrailing ? "On" : "Off") + "\n";
    }
    else
    {
        info += "📈 Session Summary\n";
        info += "Total Ticks Processed: " + IntegerToString(totalTicks) + "\n";
        info += "Orders Executed: " + IntegerToString(totalOrders) + "\n";
        info += "Max Spread: " + DoubleToString(maxSpreadSeen/pointValue, 1) + " points\n";
        info += "Avg Spread: " + DoubleToString(avgSpread/pointValue, 1) + " points\n";
    }
    
    info += separator;
    SmartPrint(info, true);
}

void UpdateDebugInfo(int tickCount)
{
    static string debugInfo = "";
    static datetime lastUpdate = 0;
    
    double currentSpread = SymbolInfoDouble(currentSymbol, SYMBOL_ASK) - SymbolInfoDouble(currentSymbol, SYMBOL_BID);
    string status = "✅";
    
    if(currentSpread > MaxSpread * pointValue)
        status = "⚠️";
        
    if(PositionsTotal() >= MaxPositions)
        status = "⏸️";
        
    debugInfo = StringFormat("%s | Spread: %.1f | DC: %.5f-%.5f | Ticks/min: %d",
                           status,
                           currentSpread/pointValue,
                           g_donchian.lowerBand,
                           g_donchian.upperBand,
                           tickCount);
                           
    // Update only if changed
    if(debugInfo != "" && TimeCurrent() - lastUpdate >= 60)
    {
        Comment(debugInfo);
        lastUpdate = TimeCurrent();
    }
}

//+------------------------------------------------------------------+
//| Expert Tester Function                                           |
//+------------------------------------------------------------------+
double OnTester()
{
    double ret = 0.0;
    double profit = TesterStatistics(STAT_PROFIT);
    double drawdown = TesterStatistics(STAT_DRAWDOWN_MAX);
    double trades = TesterStatistics(STAT_TRADES);
    
    if(trades > 0 && drawdown > 0)
        ret = (profit * sqrt(trades)) / drawdown;
        
    PrintDebugInfo(true);
    return ret;
}