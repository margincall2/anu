#property copyright "Copyright Â© 2025 Shaka"
#property link      "www.shopee.co.id/algotrade"

extern string EACmt = "Sakha Speed";
extern int FilterShort = 90;
extern int FilterLong = 120;
extern int MagicNumber = 41188;
extern int StopLoss = 14;
double MinLots = 0.01;
double MaxLots = 1000.0;
extern double RiskPercent = 2.0; // Risk per trade as a percentage of current balance
double FixedLots = 0.1;
bool MM = TRUE;
extern double MaxSpread = 10.0;
extern int Pending_Distance = 7;
extern int SL_Distance = 5;
extern int MAPeriod = 5;
extern bool Debug = False;

int MAMethod = 3;
int MAShift = 0;
double PipCommission = 0.0;

int vLotStep;
double vMaxSpread;
double AvgSpread;
double RealAvgSpread;
double vPending_Distance;
double vSL_Distance;
double vFilterShort;
double vFilterLong;
int Slippage = 3;
double StopLevel = 0.0;
bool CommissionCalculated;

double SpreadArray[30];
int Tick = 0;
double vLeverage;
bool OrderModified;
double NewBuySL;
double NewSellSL; 

double MarginForOneLot;
double AccMargin;

int init() {
   ArrayInitialize(SpreadArray, 0);

   double LotStep = MarketInfo(Symbol(), MODE_LOTSTEP);
   vLotStep = MathLog(LotStep) / MathLog(0.1);
   vMaxSpread = NormalizeDouble(MaxSpread * Point, Digits + 1);
   vPending_Distance = ND(Pending_Distance * Point);
   vSL_Distance = ND(SL_Distance * Point);
   vFilterShort = ND(FilterShort * Point);
   vFilterLong = ND(FilterLong * Point);
   StopLevel = MarketInfo(NULL, MODE_STOPLEVEL);
   CommissionCalculated = FALSE;
   PipCommission = NormalizeDouble(PipCommission * Point, Digits + 1);
   vLeverage = AccountLeverage();

   return (0);
}

int deinit() {
   return (0);
}

int start() {
   int OrdTicket;
   double NewSL;
   double PipProfit;
   int PriceDirection;
   double EntryPrice;

   double BarHigh = iHigh(NULL, 0, 0);
   double BarLow  = iLow(NULL, 0, 0);

   double MA_Low  = iMA(NULL, 0, MAPeriod, MAShift, MAMethod, PRICE_LOW, 0);
   double MA_High = iMA(NULL, 0, MAPeriod, MAShift, MAMethod, PRICE_HIGH, 0);

   if (!CommissionCalculated) {
      for (int OrdTotal = OrdersHistoryTotal() - 1; OrdTotal >= 0; OrdTotal--) {
         if (OrderSelect(OrdTotal, SELECT_BY_POS, MODE_HISTORY)) {
            if (OrderProfit() != 0.0) {
               if (OrderClosePrice() != OrderOpenPrice()) {
                  if (OrderSymbol() == Symbol()) {
                     CommissionCalculated = TRUE;
                     PipProfit = MathAbs(OrderProfit() / (OrderClosePrice() - OrderOpenPrice()));
                     PipCommission = (-OrderCommission()) / PipProfit;
                     break;
                  }
               }
            }
         }
      }
   }

   double Spread = Ask - Bid;
   ArrayCopy(SpreadArray, SpreadArray, 0, 1, 29);
   SpreadArray[29] = Spread;
   if (Tick < 30) Tick++;
   double Sum_Of_Spread = 0;
   OrdTotal = 29;
   for (int TickCounter = 0; TickCounter < Tick; TickCounter++) {
      Sum_Of_Spread += SpreadArray[OrdTotal];
      OrdTotal--;
   }

   AvgSpread = Sum_Of_Spread / Tick;
   RealAvgSpread = NormalizeDouble(AvgSpread + PipCommission, Digits + 1);
   double BarSize = BarHigh - BarLow;
   
   if (BarSize > vFilterLong  && Bid < MA_Low)  PriceDirection = -1;  // Price is going down
   if (BarSize > vFilterShort && Bid > MA_High) PriceDirection = 1; // Price is going up
   
   if (OrdersTotal() == 0 && RealAvgSpread <= vMaxSpread) {
      if (PriceDirection == -1) {
         EntryPrice = ND(Ask + vPending_Distance);
         NewSL = ND(EntryPrice - StopLoss * Point);
         OrdTicket = OrderSend(Symbol(), OP_BUYSTOP, Lot(), EntryPrice, Slippage, NewSL, 0, EACmt, MagicNumber, 0, Lime);
         if (OrdTicket <= 0) {
            Print("BUYSTOP Send Error Code: " + GetLastError() + " Message: "  + " Lot: " + DoubleToStr(Lot(), vLotStep) + " OP: " + DoubleToStr(EntryPrice, Digits) + " SL: " +
               DoubleToStr(NewSL, Digits) + " Bid: " + DoubleToStr(Bid, Digits) + " Ask: " + DoubleToStr(Ask, Digits));
         }
      }
      if (PriceDirection == 1) {
         EntryPrice = ND(Bid - vPending_Distance);
         NewSL = ND(EntryPrice + StopLoss * Point);
         OrdTicket = OrderSend(Symbol(), OP_SELLSTOP, Lot(), EntryPrice, Slippage, NewSL, 0, EACmt, MagicNumber, 0, Orange);
         if (OrdTicket <= 0) {
            Print("BUYSELL Send Error Code: " + GetLastError() + " Message: "  + " Lot: " + DoubleToStr(Lot(), vLotStep) + " OP: " + DoubleToStr(EntryPrice, Digits) + " SL: " +
               DoubleToStr(NewSL, Digits) + " Bid: " + DoubleToStr(Bid, Digits) + " Ask: " + DoubleToStr(Ask, Digits));
         }
      }
   }
   
   for (OrdTotal = 0; OrdTotal < OrdersTotal(); OrdTotal++) {
      OrderMgmt();
   }
     
   if(Debug) fDisplayInfo();

   return (0);
}	

void OrderMgmt() {
   double LocalBid;
   double LocalAsk;
   double OrdOpenPrice;
   int OrdMagic;
   double OrderSL;
   double EntryPrice;
   double NewSL;
   bool ModifyOrder;

   int SL_Status = 1;
   if (SL_Distance  <= StopLevel) SL_Status = -1;
   
   for (int OrdCounter = OrdersTotal() - 1; OrdCounter >= 0; OrdCounter--) {
      if (OrderSelect(OrdCounter, SELECT_BY_POS, MODE_TRADES) == FALSE) break;
      if (OrderSymbol() == Symbol()) {
         OrdMagic = OrderMagicNumber();
         if (OrdMagic == MagicNumber) {
            if (OrderType() == OP_BUY) {
               if (StopLoss  <= StopLevel || OrderModified == TRUE) {
                  if (OrderStopLoss() == 0.0)
                     if (NewBuySL == 0.0) NewBuySL = OrderOpenPrice() - StopLoss  * Point;
                  if ((OrderOpenPrice() - Ask) >= StopLoss * Point) {
                    if(!OrderClose(OrderTicket(), OrderLots(), Bid, 3*Point, clrBlue))Print("Order Close Error: " +GetLastError());
                  } 
               }
               if (SL_Status == -1) {
                  OrdOpenPrice = OrderOpenPrice();
                  while (!IsTradeAllowed()) Sleep(500);
                  RefreshRates();
                  LocalBid = Bid;
                  if (NewBuySL == 0.0)
                     if (LocalBid - SL_Distance * Point > OrdOpenPrice) NewBuySL = LocalBid - SL_Distance * Point;
                  if (NewBuySL > 0.0) {
                     if (LocalBid < NewBuySL)
                        if (OrderClose(OrderTicket(), OrderLots(), Bid, 3 *Point, Blue)) break;
                     if (LocalBid - SL_Distance * Point > OrdOpenPrice && LocalBid - SL_Distance * Point > NewBuySL) NewBuySL = LocalBid - SL_Distance * Point;
                  }
               }
               if (SL_Status == 1) {
                  OrdOpenPrice = OrderOpenPrice();
                  OrderSL = OrderStopLoss();
                  NewSL = OrderSL;
                  while (!IsTradeAllowed()) Sleep(500);
                  RefreshRates();
                  LocalBid = Bid;
                  if (LocalBid - SL_Distance * Point > OrdOpenPrice) NewSL = LocalBid - SL_Distance * Point;
                  if (NewSL > OrderSL && NewSL > OrdOpenPrice && LocalBid - NewSL > StopLevel * Point) {
                     if (!OrderModify(OrderTicket(), OrdOpenPrice, ND(NewSL), OrderTakeProfit(), 0)) Print("Error Occured :  ", GetLastError());
                     else {
                        NewBuySL = 0;
                        NewSellSL = 0;
                     }
                  }
               }
            }
            if (OrderType() == OP_SELL) {
               if (StopLoss <= StopLevel || OrderModified == TRUE) {
                  if (OrderStopLoss() == 0.0)
                     if (NewSellSL == 0.0) NewSellSL = OrderOpenPrice() + StopLoss * Point;
                  if (Bid - OrderOpenPrice() >= StopLoss * Point) {
                     if(!OrderClose(OrderTicket(), OrderLots(), Ask, 3 * Point, clrRed)) Print("Order Close Error: " +GetLastError());
                  }
               }
               if (SL_Status == -1) {
                  OrdOpenPrice = OrderOpenPrice();
                  while (!IsTradeAllowed()) Sleep(500);
                  RefreshRates();
                  LocalAsk = Ask;
                  if (NewSellSL == 0.0)
                     if (OrdOpenPrice - LocalAsk > SL_Distance * Point) NewSellSL = OrdOpenPrice + SL_Distance * Point;
                  if (NewSellSL > 0.0) {
                     if (LocalAsk > NewSellSL)
                        if (OrderClose(OrderTicket(), OrderLots(), Ask, 3 * Point, clrBlue)) break;
                     if (OrdOpenPrice - LocalAsk > SL_Distance * Point && LocalAsk + SL_Distance * Point < NewSellSL) NewSellSL = LocalAsk + SL_Distance * Point;
                  }
               }
               if (SL_Status == 1) {
                  OrdOpenPrice = OrderOpenPrice();
                  OrderSL = OrderStopLoss();
                  NewSL = OrderSL;
                  while (!IsTradeAllowed()) Sleep(500);
                  RefreshRates();
                  LocalAsk = Ask;
                  if ((OrdOpenPrice - LocalAsk > SL_Distance * Point) && ((OrderSL > LocalAsk + SL_Distance * Point) || OrderSL == 0.0)) {
                     NewSL = LocalAsk + SL_Distance * Point;
                  }
                  if ((NewSL < OrderSL || OrderSL == 0.0) && (NewSL < OrdOpenPrice) && (NewSL - LocalAsk > StopLevel * Point)) {
                     if (!OrderModify(OrderTicket(), OrdOpenPrice, ND(NewSL), OrderTakeProfit(), 0)) {
                        Print("Error Occured : ", GetLastError());
                        continue;
                     }
                     NewBuySL = 0;
                     NewSellSL = 0;
                  }
               }
            }
            if(OrderType() ==  OP_BUYSTOP){
               OrdOpenPrice = ND(OrderOpenPrice());
               EntryPrice = ND(Ask + vPending_Distance);
               if (EntryPrice >= OrdOpenPrice) break;
                  NewSL = ND(EntryPrice - StopLoss * Point);
                  ModifyOrder = OrderModify(OrderTicket(), EntryPrice, NewSL, OrderTakeProfit(), 0, Lime);
                     if (ModifyOrder) break;
                        Print("BUYSTOP Modify Error Code: " + GetLastError() + " Message: " + " OP: " + DoubleToStr(EntryPrice, Digits) + " SL: " + DoubleToStr(NewSL, Digits) +
                           " Bid: " + DoubleToStr(Bid, Digits) + " Ask: " + DoubleToStr(Ask, Digits));
               break;
            }
            if(OrderType() == OP_SELLSTOP){
               OrdOpenPrice = ND(OrderOpenPrice());
               EntryPrice = ND(Bid - vPending_Distance);
               if (EntryPrice <= OrdOpenPrice) break;
                  NewSL = ND(EntryPrice + StopLoss * Point);
                  ModifyOrder = OrderModify(OrderTicket(), EntryPrice, NewSL, OrderTakeProfit(), 0, Orange);
                    if (ModifyOrder) break;
                        Print("SELLSTOP Modify Error Code: " + GetLastError() + " Message: "  + " OP: " + DoubleToStr(EntryPrice, Digits) + " SL: " + DoubleToStr(NewSL, Digits) +
                           " Bid: " + DoubleToStr(Bid, Digits) + " Ask: " + DoubleToStr(Ask, Digits));
               break;
            }    
         }
      }
   }
}

double Lot() {
   int LotDigits;
   double LotSize;
   double MinLot;
   double LotStep = NormalizeDouble(MarketInfo(Symbol(), MODE_LOTSTEP), 2);
   if (LotStep == 0.01) LotDigits = 2;
   else LotDigits = 1;
   double Risk = AccountBalance() * RiskPercent / 100.0; // Calculate risk based on current balance
   if (MM) LotSize = NormalizeDouble(Risk / (StopLoss * Point), LotDigits);
   else LotSize = MinLot;
   double Sym_MinLot = NormalizeDouble(MarketInfo(Symbol(), MODE_MINLOT), 2);
   double Sym_MaxLot = NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2);
   if (LotSize < Sym_MinLot) LotSize = Sym_MinLot;
   if (LotSize > Sym_MaxLot) LotSize = Sym_MaxLot;
   return (LotSize);
}

void fDisplayInfo() {
   string SpreadInfo = "AvgSpread:" + DoubleToStr(AvgSpread, Digits) + "  Commission:" + DoubleToStr(PipCommission, Digits + 1) + "  Real Avg. Spread:" + DoubleToStr(RealAvgSpread, Digits + 1);

   if (RealAvgSpread > vMaxSpread) {
      Comment(" -----------------------------------------------------------------------", 
         "\n ----------->> SakhaSpeed Setting << ----------------", 
         "\n -----------------------------------------------------------------------", 
         "\n :: Server                           : ", AccountServer(),
         "\n :: Account Name /Number   : ", AccountName(), "/ ", AccountNumber(),
         "\n :: Leverage                        : 1 : ", AccountLeverage(),
         "\n :: Risk Setting                    : ", RiskPercent, "%", 
         "\n :: Lots                              : ", DoubleToStr(Lot(), 2), 
         "\n :: EA Setting                     : ", EACmt,
         "\n --------------------------------------------------------------------------",
         "\n :: Spread Exceed Limit!! ( " + DoubleToStr(RealAvgSpread, Digits + 1) + " > " + DoubleToStr(vMaxSpread, Digits + 1) + " )"
         "\n --------------------------------------------------------------------------");
   } else if(MarginForOneLot*Lot() > AccMargin) {
      Comment(" ------------------------------------------------------------------------------------", 
         "\n ----------->> SakhaSpeed << -----------------------------", 
         "\n -----------------------------------------------------------------------------------", 
         "\n :: Server                           : ", AccountServer(),
         "\n :: Account Name /Number   : ", AccountName(), "/ ", AccountNumber(),
         "\n :: Leverage                        : 1 : ", AccountLeverage(),
         "\n :: Risk Setting                    : ", RiskPercent, "%", 
         "\n :: Lots                              : ", DoubleToStr(Lot(), 2),
         "\n :: EA Setting                     : ", EACmt,
         "\n",
         "\n :: Margin for ", Lot()," Lot is  ", AccountCurrency(), DoubleToStr(MarginForOneLot*Lot(), 2),            
         "\n :: Account Margin ", AccountCurrency(), AccMargin, " Too Small Or Leverage Too Low",             
         "\n ------------------------------------------------------------------------------------");
   } else {
      Comment(" ------------------------------------------------------------------------------------", 
         "\n ----------->> SakhaSpeed<< -----------------------------", 
         "\n -----------------------------------------------------------------------------------", 
         "\n :: Server                           : ", AccountServer(),
         "\n :: Account Name /Number   : ", AccountName(), "/ ", AccountNumber(),
         "\n :: Leverage                        : 1 : ", AccountLeverage(),
         "\n :: Risk Setting                    : ", RiskPercent, "%", 
         "\n :: Lots                              : ", DoubleToStr(Lot(), 2),
         "\n :: EA Setting                     : ", EACmt,
         "\n",
         "\n :: EA Running OK!!! Please OFF Debug Mode To Reduce Latency",       
         "\n ------------------------------------------------------------------------------------"); 
   }
}

double ND(double ND_Ret) {
   return (NormalizeDouble(ND_Ret, Digits));
}